[window]
name = DevBattle

#supported display_mode flags:
    #FULL_SCREEN(1)
    #WINDOWED(2)
display_mode = 2

#supported border_mode flags:
    #WITH_BORDER(1)
    #BORDERLESS(2)
border_mode = 2

window_x = 0
window_y = 0
window_width = 1920
window_height = 1080

[renderer]
#supported renderer flags:
    #SOFTWARE_RENDERER(1)
    #HARDWARE_RENDERER(2)
    #VSYNC_ENABLE(4)
    #FBO_SUPPORT_ENABLE(8)
flags_mask = 10 #HARDWARE_RENDERER | FBO_SUPPORT_ENABLE

#supported scale_quality flags:
    #NEAREST(0) -  Nearest pixel sampling
    #LINEAR(1) - Linear filtering (supported by OpenGL and Direct3D)
    #BEST(2) - Currently this is the same as "linear"
scale_quality = 1

#renderer thread model execution policy
    #SINGLE_THREADED(0) - execute draw calls on main thread
    #MULTI_THREADED(1) - offload the main update look on a dedicated thread,
    #                    while keeping a the rendering loop on the main thread                      
execution_policy = 1

#responsible for async CPU primitive surfaces loading from hard drive.
#value of 0 will fallback to single core resource loading,
#effectively dispatching CPU surface loading to rendering thread
resource_loading_threads_num = 2

[engine]
# target frame rate for all sub-systems
# (graphics, gameplay, animation, audio, timers, networking)
target_fps = 60

#input event handler execution policy for OS events -
# system, window, touchscreen, keyboard, mouse, joystick.
    #POLL_BLOCKING(0) - will block calling thread until all pending events are consumed
    #RUN_IN_DEDICATED_THREAD(1) - will spawn a new thread and perform event polling there
input_event_handler_policy = 1

#Action event handler executes all main loop events on the update thread.
#This is a reactor patterns identical to UV main loop implementation.
    #BLOCKING(0) - will block calling thread (non-busy wait) for remaining frame time,
    #              processing all events (currently stored and newly incoming).
    #              The BLOCKING bevaior is preffered when the engine will be most responsive,
    #              immediatelly addressing events of any kind.

    #NON_BLOCKING(1) - will return control after all pending events are consumed,
    #                  or given allowed execution time is reached.
    #                  The NON_BLOCKING is preffered on systems, which does not have a proper
    #                  conditional variable support (such as Emscripten) and fall back to busy CPU waits.
    #                  Utilizing NON_BLOCKING policy gives more fine grained control to the user,
    #                  and in the case of Emscripten - this control is being returned to the browser.
action_event_handler_policy = 0
